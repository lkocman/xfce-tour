#!/usr/bin/env python3
import gi
import os
import gettext
import webbrowser

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, GdkPixbuf

# Setup gettext
APPNAME = "xfce-tour"
LOCALE_DIR = os.path.join(os.path.abspath(os.path.dirname(__file__)), "locale")
gettext.bindtextdomain(APPNAME, LOCALE_DIR)
gettext.textdomain(APPNAME)
_ = gettext.gettext

class WelcomeWindow(Gtk.Window):
    def __init__(self):
        super().__init__(title=_("Welcome to XFCE"))
        self.set_default_size(640, 480)
        self.set_border_width(10)

        self.stack = Gtk.Stack(transition_type=Gtk.StackTransitionType.SLIDE_LEFT_RIGHT, transition_duration=500)
        self.stack.set_hexpand(True)
        self.stack.set_vexpand(True)

        self.stack.add_titled(self.create_image_page(
            "images/sinking.svg",
            _("Ahoy this is openSUSE!"),
            _("Enjoy a lightweight desktop experience with XFCE 4.20.")
        ), "page1", "Page 1")

        self.stack.add_titled(self.create_gif_page(
            "images/screecast.gif",
            _("Brand new welcome"),
            _("KDE and GNOME start with their own welcome apps...")
        ), "page2", "Page 2")

        self.stack.add_titled(self.create_image_page(
            "images/bug.png",
            _("Early adopter"),
            _("Thank you for trying our experimental wayland variant of XFCE.")
        ), "page3", "Page 3")

        self.stack.add_titled(self.create_final_page(), "page4", "Final Page")

        # Navigation buttons
        self.next_button = Gtk.Button(label="→")
        self.next_button.connect("clicked", self.next_page)

        self.prev_button = Gtk.Button(label="←")
        self.prev_button.connect("clicked", self.prev_page)

        nav_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        nav_box.pack_start(self.prev_button, False, False, 0)
        nav_box.pack_end(self.next_button, False, False, 0)

        main_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        main_box.pack_start(self.stack, True, True, 0)
        main_box.pack_start(nav_box, False, False, 10)

        self.add(main_box)
        self.page = 0
        self.max_page = 3
        self.update_buttons()

    def update_buttons(self):
        self.prev_button.set_sensitive(self.page > 0)
        self.next_button.set_sensitive(self.page < self.max_page)

    def next_page(self, button):
        if self.page < self.max_page:
            self.page += 1
            self.stack.set_visible_child_name(f"page{self.page + 1}")
            self.update_buttons()

    def prev_page(self, button):
        if self.page > 0:
            self.page -= 1
            self.stack.set_visible_child_name(f"page{self.page + 1}")
            self.update_buttons()

    def create_image_page(self, image_path, title_text, subtitle_text):
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        box.set_border_width(20)

        image = Gtk.Image.new_from_file(image_path)
        box.pack_start(image, False, False, 0)

        title = Gtk.Label()
        title.set_markup(f"<span size='x-large'><b>{title_text}</b></span>")
        title.set_justify(Gtk.Justification.CENTER)
        title.set_line_wrap(True)
        box.pack_start(title, False, False, 0)

        subtitle = Gtk.Label(label=subtitle_text)
        subtitle.set_justify(Gtk.Justification.CENTER)
        subtitle.set_line_wrap(True)
        box.pack_start(subtitle, False, False, 0)

        return box

    def create_gif_page(self, gif_path, title_text, subtitle_text):
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        box.set_border_width(20)

        anim = GdkPixbuf.PixbufAnimation.new_from_file(gif_path)
        image = Gtk.Image.new_from_animation(anim)
        box.pack_start(image, False, False, 0)

        title = Gtk.Label()
        title.set_markup(f"<span size='x-large'><b>{title_text}</b></span>")
        title.set_justify(Gtk.Justification.CENTER)
        title.set_line_wrap(True)
        box.pack_start(title, False, False, 0)

        subtitle = Gtk.Label(label=subtitle_text)
        subtitle.set_justify(Gtk.Justification.CENTER)
        subtitle.set_line_wrap(True)
        box.pack_start(subtitle, False, False, 0)

        return box

    def create_final_page(self):
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        box.set_border_width(20)

        image = Gtk.Image.new_from_file("images/xfce.svg")
        box.pack_start(image, False, False, 0)

        label = Gtk.Label(label=_("Need help or want to learn more?"))
        label.set_justify(Gtk.Justification.CENTER)
        label.set_line_wrap(True)
        box.pack_start(label, False, False, 0)

        def add_button(label, url):
            btn = Gtk.Button(label=label)
            btn.connect("clicked", lambda w: webbrowser.open(url))
            box.pack_start(btn, False, False, 0)

        add_button(_("XFCE Documentation"), "https://docs.xfce.org/")
        add_button(_("openSUSE Forums"), "https://forums.opensuse.org")
        add_button(_("Release notes"), "https://susedoc.github.io/release-notes/leap-16.0/html/release-notes/")
        add_button(_("Report issues"), "https://en.opensuse.org/openSUSE:Testing")

        close_btn = Gtk.Button(label=_("Close"))
        close_btn.connect("clicked", lambda w: Gtk.main_quit())
        box.pack_start(close_btn, False, False, 10)

        return box

if __name__ == "__main__":
    win = WelcomeWindow()
    win.connect("destroy", Gtk.main_quit)
    win.show_all()
    Gtk.main()

